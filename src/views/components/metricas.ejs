<% function formatarDataHora(dataStr) {
    let data = new Date(dataStr);
    function padZero(num) {
        return num < 10 ? '0' + num : num;
    }
    let dia = padZero(data.getDate());
    let mes = padZero(data.getMonth() + 1);
    let ano = data.getFullYear();
    let horas = padZero(data.getHours());
    let minutos = padZero(data.getMinutes());
    let dataFormatada = `${dia}/${mes}/${ano} - ${horas}:${minutos}`;
    return dataFormatada;
} %>

<% function formatarTelefone(numero) {
    const numeroLimpo = numero.replace(/\D/g, '');
    if (numeroLimpo.length === 11) {
        return `(${numeroLimpo.substring(0, 2)}) ${numeroLimpo.substring(2, 7)}-${numeroLimpo.substring(7)}`;
    } else {
        return numero;
    }
} %>

<section >
    <div class="md:p-4">
        <p>Pessoas cadastradas: <span><%= typeof lengthPessoas != "undefined" && lengthPessoas[0].total || 0 %></span></p>
        <p>Registradores cadastrados: <span><%= typeof lengthRegistradores != "undefined" && lengthRegistradores[0].total ? lengthRegistradores[0].total : 0 %></span></p>

    </div><br><hr><br>


    <!-- FILTROS -->
    <div class=" flex items-center space-x-4  overflow-x-auto">

        <div class="flex flex-col space-y-2">
            <label for="registrador" class="text-sm text-gray-600">Buscar pessoas por registrador</label>
            <select  name="" id="registradorSelect" class="px-4 py-2 border rounded-sm bg-c5 text-white">
                <option value="" selected disabled>Registradores</option>
                <% if (typeof registradores !== "undefined" && registradores) { %>
                        <% registradores.map(element => { %>
                            <option value="<%= element.id %>"><%= element.name?.toUpperCase() %></option>
                        <% }) %>
                <% } %>
            </select>
        </div>
    </div>

    <br>
    <div class="w-full overflow-x-auto">
        <table class="w-full">
            <caption class="text-lg font-semibold">Ultimas pessoas cadastradas</caption>
            <thead>
                <tr class="bg-gray-500 text-white">
                    <th class="border border-gray-600 px-4 py-2">ID</th>
                    <th class="border border-gray-600 px-4 py-2">Nome</th>
                    <th class="border border-gray-600 px-4 py-2">Telefone</th>
                    <th class="border border-gray-600 px-4 py-2">Zona</th>
                    <th class="border border-gray-600 px-4 py-2">Seção</th>
                    <th class="border border-gray-600 px-4 py-2">Registro</th>
                </tr>
            </thead>
            <tbody id="tbodyTable" class="max-w-96 overflow-y-auto">
                <!-- Exemplo de dados dinâmicos -->
                <% if (typeof lestPessoas != "undefined" && lestPessoas) { %>
                    <% lestPessoas.forEach(e => { %>
                        <tr>
                            <td class="border border-gray-400 px-4 py-2"><%= e.id %></td>
                            <td class="border border-gray-400 px-4 py-2"><%= e.nome %></td>
                            <td class="border border-gray-400 px-4 py-2"><%= formatarTelefone(e.telefone) %></td>
                            <td class="border border-gray-400 px-4 py-2"><%= e.zona %></td>
                            <td class="border border-gray-400 px-4 py-2"><%= e.secao %></td>
                            <td class="border border-gray-400 px-4 py-2"><%= formatarDataHora(e.data_registro) %></td>
                        </tr>
                    <% }) %>
                <% } %>
            </tbody>
        </table>
    </div>
    
    

</section>

<script>
    const registradorSelect = document.getElementById('registradorSelect');
    const tbodyTable = document.getElementById('tbodyTable');

    registradorSelect.addEventListener('change', async event => {
        const registradorId =  registradorSelect.value;
        const pessoas = await getByRegistradorId(registradorId)
        changeTable(pessoas.result)
    })

    function getByRegistradorId(id){
        return new Promise((resolve, reject) => {
            fetch('/pessoa/getByRegistradorId/' + id, {
                method: 'GET',
                headers: {'Content-Type': 'application/json'}
            })
            .then(res => res.json())
            .then(res => resolve(res))
            .catch(error => reject(error))
        })
    }

    function changeTable(data){
        tbodyTable.innerHTML = "";

        data.forEach(e => {
            let component = `
            <tr>
                <td class="border border-gray-400 px-4 py-2">${e.id}</td>
                <td class="border border-gray-400 px-4 py-2">${e.nome}</td>
                <td class="border border-gray-400 px-4 py-2">${formatarTelefone(e.telefone)}</td>
                <td class="border border-gray-400 px-4 py-2">${e.zona}</td>
                <td class="border border-gray-400 px-4 py-2">${e.secao}</td>
                <td class="border border-gray-400 px-4 py-2">${formatarDataHora(e.data_registro)}</td>
            </tr>`

            tbodyTable.innerHTML = component;
        });
    }

    // FORMATAÇÃO
    function formatarDataHora(dataStr) {
        let data = new Date(dataStr);
        function padZero(num) {
            return num < 10 ? '0' + num : num;
        }
        let dia = padZero(data.getDate());
        let mes = padZero(data.getMonth() + 1); 
        let ano = data.getFullYear();
        let horas = padZero(data.getHours());
        let minutos = padZero(data.getMinutes());
        let dataFormatada = `${dia}/${mes}/${ano} - ${horas}:${minutos}`;
        return dataFormatada;
    }
    function formatarTelefone(numero) {
        const numeroLimpo = numero.replace(/\D/g, '');
        if (numeroLimpo.length === 11) {
            return `(${numeroLimpo.substring(0, 2)}) ${numeroLimpo.substring(2, 7)}-${numeroLimpo.substring(7)}`;
        } else {
            return numero;
        }
    }


</script>